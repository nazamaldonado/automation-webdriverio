"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.browser = void 0;
const globals_1 = require("@wdio/globals");
exports.default = class CJSElectronService {
    constructor(options, caps, config) {
        this.instance = (async () => {
            const importPath = '../service.js';
            const { default: ElectronService } = await Promise.resolve(`${importPath}`).then(s => __importStar(require(s)));
            return new ElectronService(options, caps, config);
        })();
    }
    async beforeSession(config, capabilities, specs, cid) {
        const instance = await this.instance;
        return instance?.beforeSession?.(config, capabilities, specs, cid);
    }
    async before(capabilities, specs, browser) {
        const instance = await this.instance;
        return instance?.before?.(capabilities, specs, browser);
    }
};
exports.launcher = class CJSElectronLauncher {
    constructor(options, caps, config) {
        this.instance = (async () => {
            const importPath = '../service.js';
            const { default: ElectronService } = await Promise.resolve(`${importPath}`).then(s => __importStar(require(s)));
            return new ElectronService(options, caps, config);
        })();
    }
    async onPrepare(config, capabilities) {
        const instance = await this.instance;
        return instance?.onPrepare?.(config, capabilities);
    }
};
exports.browser = globals_1.browser;
//# sourceMappingURL=index.js.map