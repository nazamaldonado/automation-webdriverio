{"version":3,"file":"application.js","sourceRoot":"","sources":["../src/application.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'node:fs/promises';\nimport path from 'node:path';\n\nimport type { NormalizedReadResult } from 'read-package-up';\n\nimport log from './log.js';\nimport { APP_NAME_DETECTION_ERROR, BUILD_TOOL_DETECTION_ERROR, MULTIPLE_BUILD_TOOLS_ERROR } from './constants.js';\nimport type { AppBuildInfo, ElectronBuilderConfig, ElectronForgeConfig } from './types.js';\n\nconst SupportedPlatform = {\n  darwin: 'darwin',\n  linux: 'linux',\n  win32: 'win32',\n};\n\n/**\n * Determine the path to the Electron application binary\n * @param packageJsonPath path to the nearest package.json\n * @param appName name of the application\n * @param buildToolConfig configuration for the detected build tool\n * @param p   process object (used for testing purposes)\n * @returns   path to the Electron app binary\n */\nexport async function getBinaryPath(packageJsonPath: string, appBuildInfo: AppBuildInfo, p = process) {\n  if (!Object.values(SupportedPlatform).includes(p.platform)) {\n    throw new Error(`Unsupported platform: ${p.platform}`);\n  }\n\n  let outDir;\n\n  if (appBuildInfo.isForge) {\n    // Electron Forge always bundles into an `out` directory - see comment in getBuildToolConfig below\n    outDir = path.join(path.dirname(packageJsonPath), 'out', `${appBuildInfo.appName}-${p.platform}-${p.arch}`);\n  } else {\n    const builderOutDirName = (appBuildInfo.config as ElectronBuilderConfig)?.directories?.output || 'dist';\n    const builderOutDirMap = {\n      darwin: path.join(builderOutDirName, p.arch === 'arm64' ? 'mac-arm64' : 'mac'),\n      linux: path.join(builderOutDirName, 'linux-unpacked'),\n      win32: path.join(builderOutDirName, 'win-unpacked'),\n    };\n    outDir = path.join(path.dirname(packageJsonPath), builderOutDirMap[p.platform as keyof typeof SupportedPlatform]);\n  }\n\n  const binaryPathMap = {\n    darwin: path.join(`${appBuildInfo.appName}.app`, 'Contents', 'MacOS', appBuildInfo.appName),\n    linux: appBuildInfo.appName,\n    win32: `${appBuildInfo.appName}.exe`,\n  };\n  const electronBinaryPath = binaryPathMap[p.platform as keyof typeof SupportedPlatform];\n\n  return path.join(outDir, electronBinaryPath);\n}\n\n/**\n * Determine build information about the Electron application\n * @param pkg path to the nearest package.json\n * @returns   promise resolving to the app build information\n */\nexport async function getAppBuildInfo(pkg: NormalizedReadResult): Promise<AppBuildInfo> {\n  const forgeDependencyDetected = Object.keys(pkg.packageJson.devDependencies || {}).includes('@electron-forge/cli');\n  const builderDependencyDetected = Object.keys(pkg.packageJson.devDependencies || {}).includes('electron-builder');\n\n  // Forge configuration is not currently used to determine the Electron app binary path\n  // - when custom output directories are supported in Forge we can use this config value for path determination\n  // - see https://github.com/electron/forge/pull/2714\n  const forgePackageJsonConfig = pkg.packageJson.config?.forge;\n  const forgeCustomConfigFile = typeof forgePackageJsonConfig === 'string';\n  const forgeConfigPath = forgeCustomConfigFile ? forgePackageJsonConfig : 'forge.config.js';\n  const rootDir = path.dirname(pkg.path);\n  let forgeConfig = forgePackageJsonConfig as ElectronForgeConfig;\n  let builderConfig: ElectronBuilderConfig = pkg.packageJson.build;\n\n  if (!forgePackageJsonConfig || forgeCustomConfigFile) {\n    // if no config or a linked file, attempt to read Forge JS-based config\n    try {\n      log.debug(`Reading Forge config file: ${forgeConfigPath}...`);\n      forgeConfig = ((await import(path.join(rootDir, forgeConfigPath))) as { default: ElectronForgeConfig }).default;\n    } catch (e) {\n      log.debug(e);\n    }\n  }\n\n  const isForge = Boolean(forgeConfig || forgeDependencyDetected);\n\n  if (!isForge) {\n    // if no Forge config or dependency, attempt to read `electron-builder.json`\n    try {\n      log.debug('Forge not detected, reading `electron-builder.json`...');\n      const data = await fs.readFile(path.join(rootDir, 'electron-builder.json'), 'utf-8');\n      builderConfig = JSON.parse(data);\n    } catch (e) {\n      log.debug(e);\n    }\n  }\n\n  const isBuilder = Boolean(builderConfig || builderDependencyDetected);\n\n  if (isForge && isBuilder) {\n    throw new Error(MULTIPLE_BUILD_TOOLS_ERROR);\n  }\n  if (!isForge && !isBuilder) {\n    throw new Error(BUILD_TOOL_DETECTION_ERROR);\n  }\n\n  const config = isForge ? forgeConfig : builderConfig;\n  log.debug(`${isForge ? 'Forge' : 'Builder'} configuration detected: ${config}`);\n\n  const appName: string =\n    pkg.packageJson.productName ||\n    (isBuilder && (config as ElectronBuilderConfig)?.productName) ||\n    (isForge && (config as ElectronForgeConfig)?.packagerConfig?.name) ||\n    pkg.packageJson.name;\n\n  if (!appName) {\n    throw new Error(APP_NAME_DETECTION_ERROR);\n  }\n\n  return {\n    appName,\n    config,\n    isForge,\n    isBuilder,\n  };\n}\n"]}